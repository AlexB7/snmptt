#!/usr/bin/perl
#
# SNMPTTCONVERTMIB v0.1.2
#
# Copyright 2002 Alex Burger
# alex_b@users.sourceforge.net
# 
# 8/14/2002
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
##############################################################################
#
# http://www.sourceforge.net/projects/snmptt
#
###############################################################################
#
# OPTIONS START
# 
# Set this to '' to have no default EXEC line added, or modify as needed.
#$defaultexec = '';
$defaultexec = '#EXEC qpage -f TRAP notifygroup1';

# Choose what type of quotes (if any) you want around the SUMMARY text pulled from the MIB.
#$defaultexecquote = '';		# no quotes
#$defaultexecquote = "\'";		# single (') quotes
$defaultexecquote = "\"";		# double (") quotes

# Set this to 1 to have the --TYPE string prepended to the --SUMMARY string.
# Set to 0 to disable
$prepend_type = 1;

#
# OPTIONS END
#
#############################################################################
#
# Debugging:  	0 = no output messages
#		1 = output some basic messages
#		2 = out all messages
use constant DEBUGGING => 2;

if ((@ARGV[0] eq "") || (@ARGV[1] eq ""))
{
	print "Missing arguments!\n\n";
	print "Syntax is: snmpttconvertmib inputmibfile outputfile\n\n";
	die;
}

print "\nFile to load is:	@ARGV[0]\n";
print "File to APPEND TO:	@ARGV[1]\n";

$input = @ARGV[0];
$output = @ARGV[1];

if (DEBUGGING >= 1)
{
	print "\nLoading @ARGV[0]\n";
}

unless (open INPUTFILE, "<$input")
{
	die "Cannot open input file: $!";
}

while (<INPUTFILE>)
{
	chomp;				#remove <cr> at end of line	
	push(@mibfile, $_);		#add to each line to @trapconf array
}

if (DEBUGGING >= 1)
{
	print "Finished loading @ARGV[0]\n\n";
}

$currentline=0;

unless (open OUTPUTFILE, ">>$output")
{
	die "Cannot open output file: $!";
}

while ($currentline <= $#mibfile)
{
	$line = @mibfile[$currentline];
	
	# TRAP-TYPE - SNMP V1
	# 
	# eg: 'mngmtAgentTrap-23003 TRAP-TYPE';
	if ( $line =~ /(.*)\s+TRAP-TYPE.*/ )
	{	
		# If the TRAP-TYPE line starts with white space, it's probably a import line, so ignore
		if ( $line =~ /^\s+TRAP-TYPE.*/ )
		{
			print "skipping a TRAP-TYPE line - probably an import line.\n";
			$currentline++; # Increment to the next line
			$line = @mibfile[$currentline]; # Get next line
			next;
		}
		
		$trapname = $1;

		# Remove beginning and trailing white space
		$trapname =~ /\s*([A-Za-z0-9_-]+)\s*/;
		$trapname = $1;

		
		print "#\n";
		print "Line: $currentline\n";
		print "TRAP-TYPE: $1\n";		# If trapsummary blank, use trapsummary line for FORMAT and EXEC

		$currentline++; # Increment to the next line
		$line3 = @mibfile[$currentline];
		
		while ( ($currentline <= $#mibfile) && !($line3 =~ /(.*)\s+TRAP-TYPE.*/ ) )
		{
			# Keep going through the file until the next TRAP-TYPE or the end of the mib file
			# is reached
				
			# Look for DESCRIPTION and anything after (including newline with /s)
			# and capture that anything in $1
			if ($line3 =~ /ENTERPRISE\s+(.*)/)
			{
				print "Enterprise: $1\n";
				$enterprise = $1;
			}
			
			if ($line3 =~ /DESCRIPTION(.*)/s)
			{
				$temp1 = 0;
				$traptype = "";
				$trapsummary = "";
				@description = ();
				
				# Start of DESCRIPTION
				
				#print "SDESC\n";
				
				# If there is more text after the word DESCRIPTION, assume it's the start of 
				# the description.  If it is, pull it out and place in $descriptionline1.
				if ($1 ne "")
				{
					# Pull out text and remove beginning and trailing white space
					if ($1 =~ /\s*(.*)\s*/)
					{
						#print ("2\n");
						# Remove any quotes
						$_ = $1;
						s(\")()g;
						# "								
						$descriptionline1 = $_;
						$temp1 = 1;

						push (@description, "$_\n");
						#print "Line 1a: $_ \n";
					}
				}
				
				$currentline++; # Increment to the next line
				$line4 = @mibfile[$currentline];
	
				# Assume the rest is the description up until a ::= or end of the file
				while (! ($line4 =~ /::=/))
				{
					# If next line is a --#TYPE, pull out the information and place in $traptype
					if ($line4 =~ /--#TYPE(.*)/)
					{
							
						# Pull out text and remove beginning and trailing white space and quotes
						if ($line4 =~ /\s*--#TYPE\s*(.*)\s*/)
						{
							# Remove any quotes
							$_ = $1;
							s(\")()g;
							# "
							
							#print ("2\n");
							$traptype = $_;
							#print "Type: $traptype \n";
						}
						
						# Increment to next line and continue with the loop
						$currentline++; # Increment to the next line
						$line4 = @mibfile[$currentline];
						next;
					}
				  	
					# If next line is a --#SUMMARY, pull out the information and place in $summary
					if ($line4 =~ /--#SUMMARY(.*)/)
					{
							
						# Pull out text and remove beginning and trailing white space and quotes
						if ($line4 =~ /\s*--#SUMMARY\s*(.*)\s*/)
						{
							# Remove any quotes
							$_ = $1;
							s(\")()g;
							# "
							
							#print ("2\n");
							$trapsummary = $_;
							#print "Summary: $trapsummary \n";
						}
						
						# Increment to next line and continue with the loop
						$currentline++; # Increment to the next line
						$line4 = @mibfile[$currentline];
						next;
					}
					# If next line is a --#ARGUMENTS, pull out the information and place in $arguments
					if ($line4 =~ /--#ARGUMENTS {(.*)}/)
					{
						@arguments = split /,/, $1;
						
						for($i=0;$i <= $#arguments;$i++)
						{
							#print "argument $i: @arguments[$i]\n";
						}
											
						# Increment to next line and continue with the loop
						$currentline++; # Increment to the next line
						$line4 = @mibfile[$currentline];
						next;
					}					
					# If next line starts with a --#, ignore it and continue with the loop
					# (we already got the SUMMARY line above)
					if ($line4 =~ /--#/)
					{
						$currentline++; # Increment to the next line
						$line4 = @mibfile[$currentline];
						next;
					}
					# If we did not find text after the word DESCRIPTION, then the NEXT
					# line must be the first line of description.  Pull that out and place
					# in $descriptionline1.
					if ($temp1 == 0)
					{
						# Remove beginning and trailing white space
						$line4 =~ (/\s*(.*)\s*/);
						# Remove any quotes
						$_ = $1;
						s(\")()g;
						# "								
						$descriptionline1 = $_;
						
						push (@description, "$_\n");
						#print "Line 1b: $_ \n";
						$temp1 = 1;
					}
					else
					{
						# Remove beginning and trailing white space
						$line4 =~ (/\s*(.*)\s*/);
						if ($1 ne "")
						{
							# Remove any quotes
							$_ = $1;
							s(\")()g;
							# "
														
							push (@description, "$_\n");
							#print "c:$_\n";
						}
					}

					$currentline++; # Increment to the next line
					$line4 = @mibfile[$currentline];
				}
				#print "EDESC\n";
			}
			$currentline++; # Increment to the next line
			$line3 = @mibfile[$currentline];
		}

		# Combine Trap type and summary together to make new summary
		if ($traptype ne "" && $prepend_type == 1)
		{
			$trapsummary = $traptype . ": " . $trapsummary;
		}
		
		$trapoid = `snmptranslate -IR -Ts $enterprise#.$trapname`;
		chomp $trapoid;
		if ($trapoid ne "")
		{
			print OUTPUTFILE "#\n#\n#\n";
			print OUTPUTFILE "EVENT $trapname $trapoid \"Status Events\" Normal\n";
	
			# Loop through trapsummary and replace the %s and %d etc with %1 to %n
	
			$j = $#arguments; # j is last element number
			
			#print "j is $j\n";
			
			# Change the %s or %d etc into $1 etc (starts at $1)
			$_ = $trapsummary;
			for ($j=0; $j<= $#arguments; $j++)
			{
				$variable = (@arguments[$j])+1;
				s(%[a-zA-Z])(\$$variable);
			}
			
			#print "new summary: $_\n";
			
			$trapsummary = $_;
			
			# Use trapsummary line
			if ($trapsummary ne "")
			{
				print OUTPUTFILE "FORMAT $trapsummary\n";
				if ($defaultexec ne '')
				{
					print OUTPUTFILE "$defaultexec $defaultexecquote$trapsummary$defaultexecquote\n"
				}		
			}
			# If trapsummary blank, use descriptionline1 line
			elsif ($descriptionline1 ne "")
			{


				if ($descriptionline1 =~ /%[a-zA-Z]/)
				{
					# Sometimes the variables are in the first line of the description
					# Change the %s or %d etc into $1 etc (starts at $1)
					# There is no list of variables, so just put them in order starting at 1 and
					# going up to 20
					$_ = $descriptionline1;
					for ($j=1; $j<= 20; $j++)
					{
						s(%[a-zA-Z])(\$$j);
					}
					$descriptionline1 = $_;
					$descriptionlinehadvariables = 1;

					print OUTPUTFILE "FORMAT $descriptionline1\n";
					if ($defaultexec ne '')
					{
						print OUTPUTFILE "$defaultexec $defaultexecquote$descriptionline1$defaultexecquote\n"
					}
				}
				else
				{
					print OUTPUTFILE "FORMAT $descriptionline1 \$*\n";
					if ($defaultexec ne '')
					{
						print OUTPUTFILE "$defaultexec $defaultexecquote$descriptionline1 \$*$defaultexecquote\n"
					}
				}
			}
			# If descriptionline1 is also blank, just use $*
			else
			{
				print OUTPUTFILE "FORMAT \$*\n";
				if ($defaultexec ne '')
				{
					print OUTPUTFILE "$defaultexec $defaultexecquote\$*$defaultexecquote\n"
				}
				#print OUTPUTFILE "EXEC \$*\n";
			}
	
			print OUTPUTFILE "SDESC\n";
			#print OUTPUTFILE "$descriptionline1\n";
			for ($i=0; $i <= $#description; $i++)
			{
				print OUTPUTFILE "@description[$i]";
			}
			print OUTPUTFILE "EDESC\n";
	
			$currentline--;
		}
		
		print "OID: $trapoid\n";
		#print "\@description is ", $#description,"\n";
		#print "going to next trap\n\n";
	}

	# NOTIFICATION-TYPE - SNMP V2
	# 
	# eg: 'ciscoSystemClockChanged NOTIFICATION-TYPE';
	if ( $line =~ /(.*)\s+NOTIFICATION-TYPE.*/ )
	{	
		$enterprisefound =0;

		# If the NOTIFICATION-TYPE line starts with white space or a comma, it's probably a import line, so ignore
		if (( $line =~ /^\s+NOTIFICATION-TYPE.*/ ) | ( $line =~ /^.*,.*NOTIFICATION-TYPE.*/ ))
		{
			print "skipping a NOTIFICATION-TYPE line - probably an import line.\n";
			$currentline++; # Increment to the next line
			$line = @mibfile[$currentline]; # Get next line
			next;
		}
		
		$notificationname = $1;

		# Remove beginning and trailing white space
		$notificationname =~ /\s*([A-Za-z0-9_-]+)\s*/;
		$notificationname = $1;
			
		print "#\n";
		print "Line: $currentline\n";
		print "NOTIFICATION-TYPE: $1\n";	# If trapsummary blank, use trapsummary line for FORMAT and EXEC

		$currentline++; # Increment to the next line
		$line3 = @mibfile[$currentline];
		
		$end_of_definition = 0;
		
		while ( ($currentline <= $#mibfile) && !($line3 =~ /(.*)\s+NOTIFICATION-TYPE.*/ )
	      			&& $end_of_definition == 0)
		{
			# Keep going through the file until the next NOTIFICATION-TYPE or the end of the mib file
			# is reached
				
			# Look for DESCRIPTION and anything after (including newline with /s)
			# and capture that anything in $1		
			if ($line3 =~ /DESCRIPTION(.*)/s)
			{
				$temp1 = 0;
				$notificationtype = "";
				$notificationsummary = "";
				@description = ();
				
				# Start of DESCRIPTION
				
				#print "SDESC\n";
				
				# If there is more text after the word DESCRIPTION, assume it's the start of 
				# the description.  If it is, pull it out and place in $descriptionline1.
				if ($1 ne "")
				{
					# Pull out text and remove beginning and trailing white space
					if ($1 =~ /\s*(.*)\s*/)
					{
						#print ("2\n");
						# Remove any quotes
						$_ = $1;
						s(\")()g;
						# "								
						$descriptionline1 = $_;
						$temp1 = 1;

						push (@description, "$_\n");
						#print "Line 1a: $_ \n";
					}
				}
				
				$currentline++; # Increment to the next line
				$line4 = @mibfile[$currentline];
	
				# Assume the rest is the description up until a ::= or end of the file
				while (! ($line4 =~ /^\s+.*::=/))
				{
					# If next line is a --#TYPE, pull out the information and place in 
					# $notificationtype
					if ($line4 =~ /--#TYPE(.*)/)
					{
							
						# Pull out text and remove beginning and trailing white space and quotes
						if ($line4 =~ /\s*--#TYPE\s*(.*)\s*/)
						{
							# Remove any quotes
							$_ = $1;
							s(\")()g;
							# "
							
							#print ("2\n");
							$notificationtype = $_;
							#print "Type: $notificationtype \n";
						}
						
						# Increment to next line and continue with the loop
						$currentline++; # Increment to the next line
						$line4 = @mibfile[$currentline];
						next;
					}

				  	# If next line is a --#SUMMARY, pull out the information and place in
					# $notificationsummary
					if ($line4 =~ /--#SUMMARY(.*)/)
					{
						# Pull out text and remove beginning and trailing white space and quotes
						if ($line4 =~ /\s*--#SUMMARY\s*(.*)\s*/)
						{
							# Remove any quotes
							$_ = $1;
							s(\")()g;
							# "
							
							#print ("2\n");
							$notificationsummary = $_;
							#print "Summary: $notificationsummary \n";
						}
						
						# Increment to next line and continue with the loop
						$currentline++; # Increment to the next line
						$line4 = @mibfile[$currentline];
						next;
					}
					# If next line is a --#ARGUMENTS, pull out the information and place in $arguments
					if ($line4 =~ /--#ARGUMENTS {(.*)}/)
					{
						@arguments = split /,/, $1;
						
						for($i=0;$i <= $#arguments;$i++)
						{
							#print "argument $i: @arguments[$i]\n";
						}
											
						# Increment to next line and continue with the loop
						$currentline++; # Increment to the next line
						$line4 = @mibfile[$currentline];
						next;
					}					
					# If next line starts with a --#, ignore it and continue with the loop
					# (we already got the SUMMARY line above)
					if ($line4 =~ /--#/)
					{
						$currentline++; # Increment to the next line
						$line4 = @mibfile[$currentline];
						next;
					}
					# If we did not find text after the word DESCRIPTION, then the NEXT
					# line must be the first line of description.  Pull that out and place
					# in $descriptionline1.
					if ($temp1 == 0)
					{
						# Remove beginning and trailing white space
						$line4 =~ (/\s*(.*)\s*/);
						# Remove any quotes
						$_ = $1;
						s(\")()g;
						# "								
						$descriptionline1 = $_;
						
						push (@description, "$_\n");
						#print "Line 1b: $_ \n";
						$temp1 = 1;
					}
					else
					{
						# Remove beginning and trailing white space
						$line4 =~ (/\s*(.*)\s*/);
						if ($1 ne "")
						{
							# Remove any quotes
							$_ = $1;
							s(\")()g;
							# "
														
							push (@description, "$_\n");
							#print "c:$_\n";
						}
					}

					$currentline++; # Increment to the next line
					$line4 = @mibfile[$currentline];
				}
				
				if ($enterprisefound == 0)
				{
					# $line4 should now contain ::= line
					# Pull out enterprise from { }
					#print "Line4: $line4\n";
					$line4 =~ /{(.*)\s\d.*/;

					#print "\$1=$1\n";
					$enterprisefound =1;
					
					# Remove any spaces
					$_ = $1;
					s( )()g;
					$enterprise = $_;
					print "Enterprise: $enterprise\n";

					$end_of_definition = 1;		# Move on to the next one
				}
				
				
				
			}
			$currentline++; # Increment to the next line
			$line3 = @mibfile[$currentline];
		}

		# Combine Notification type and summary together to make new summary
		if ($notificationtype ne "" && $prepend_type == 1)
		{
			$notificationsummary = $notificationtype . ": " . $notificationsummary;
		}
		
		$notificationoid = `snmptranslate -IR -Ts $enterprise.$notificationname`;
		chomp $notificationoid;
		if ($notificationoid ne "")
		{
			print OUTPUTFILE "#\n#\n#\n";
			print OUTPUTFILE "EVENT $notificationname $notificationoid \"Status Events\" Normal\n";
	
			# Loop through notificationsummary and replace the %s and %d etc with %1 to %n
	
			$j = $#arguments; # j is last element number
			
			#print "j is $j\n";
			
			# Change the %s or %d etc into $1 etc (starts at $1)
			$_ = $notificationsummary;
			for ($j=0; $j<= $#arguments; $j++)
			{
				$variable = (@arguments[$j])+1;
				s(%[a-zA-Z])(\$$variable);
			}
			
			#print "new summary: $_\n";
			
			$notificationsummary = $_;
			
			# Use notificationsummary line
			if ($notificationsummary ne "")
			{
				print OUTPUTFILE "FORMAT $notificationsummary\n";
				if ($defaultexec ne '')
				{
					print OUTPUTFILE "$defaultexec $defaultexecquote$notificationsummary$defaultexecquote\n"
				}		
			}
			# If notificationsummary blank, use descriptionline1 line
			elsif ($descriptionline1 ne "")
			{


				if ($descriptionline1 =~ /%[a-zA-Z]/)
				{
					# Sometimes the variables are in the first line of the description
					# Change the %s or %d etc into $1 etc (starts at $1)
					# There is no list of variables, so just put them in order starting at 1 and
					# going up to 20
					$_ = $descriptionline1;
					for ($j=1; $j<= 20; $j++)
					{
						s(%[a-zA-Z])(\$$j);
					}
					$descriptionline1 = $_;
					$descriptionlinehadvariables = 1;

					print OUTPUTFILE "FORMAT $descriptionline1\n";
					if ($defaultexec ne '')
					{
						print OUTPUTFILE "$defaultexec $defaultexecquote$descriptionline1$defaultexecquote\n"
					}
				}
				else
				{
					print OUTPUTFILE "FORMAT $descriptionline1 \$*\n";
					if ($defaultexec ne '')
					{
						print OUTPUTFILE "$defaultexec $defaultexecquote$descriptionline1 \$*$defaultexecquote\n"
					}
				}
			}
			# If descriptionline1 is also blank, just use $*
			else
			{
				print OUTPUTFILE "FORMAT \$*\n";
				if ($defaultexec ne '')
				{
					print OUTPUTFILE "$defaultexec $defaultexecquote\$*$defaultexecquote\n"
				}
				#print OUTPUTFILE "EXEC \$*\n";
			}
	
			print OUTPUTFILE "SDESC\n";
			#print OUTPUTFILE "$descriptionline1\n";
			for ($i=0; $i <= $#description; $i++)
			{
				print OUTPUTFILE "@description[$i]";
			}
			print OUTPUTFILE "EDESC\n";
	
			$currentline--;
		}
		
		print "OID: $notificationoid\n";
		#print "\@description is ", $#description,"\n";
		#print "going to next notification\n\n";
	}
	
	$currentline++; # Increment to the next line
	$line2 = @mibfile[$currentline]; # Get next line
}	
