#!/usr/bin/perl
#
# SNMPTTCONVERTMIB v0.2.1
#
# Copyright 2002 Alex Burger
# alex_b@users.sourceforge.net
# 
# 8/14/2002
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
##############################################################################
#
# http://www.sourceforge.net/projects/snmptt
#
###############################################################################
#
# OPTIONS START
# 
# Set this to '' to have no default EXEC line added, or modify as needed.
#$defaultexec = '';
$defaultexec = '#EXEC qpage -f TRAP notifygroup1';

# Choose what type of quotes (if any) you want around the SUMMARY text pulled from the MIB.
#$defaultexecquote = '';		# no quotes
#$defaultexecquote = "\'";		# single (') quotes
$defaultexecquote = "\"";		# double (") quotes

# Set this to 1 to have the --TYPE string prepended to the --SUMMARY string.
# Set to 0 to disable
$prepend_type = 1;

# Set this to 1 to have append a $* to the end of the FORMAT and EXEC lines if there
# is no --#SUMMARY information and the description line contains something, but does 
# not have any variables in it.
$default_wildcard = 1;

#
# OPTIONS END
#
#############################################################################
#

$snmpttconvertmib_version = "v0.2";

sub showversion
{
	print "\nSNMPTTCONVERTMIB $snmpttconvertmib_version\n";
	print "(c) 2002 Alex Burger\n";
	print "http://snmptt.sourceforge.net\n\n";
}

##############################################################################
# Process command line arguments

$| = 1;

use Getopt::Long;

$DEBUGGING = 0;

$version = 0;
$debug = 0;
$help = 0;
$net_snmp_perl = 0;
$in = '';
$out = '';
$mibdir = '/usr/share/snmp/mibs/';
$nodes = '';

GetOptions 	('version' => \$version, 
		'debug:i' => \$debug,
		'help' => \$help,
		'in=s' => \$in,  
		'out=s' => \$out,
		'net_snmp_perl' => \$net_snmp_perl,
		'mibdir=s' => \$mibdir,
		'nodes=s' => \$nodes);
	
if ($version == 1)
{
	&showversion;
	exit(0);
}

if ($help == 1)
{
$USAGE = qq/Usage:
    snmpttconvertmib [<options>] 
Options:
    --debug=n                            Set debug level (1 or 2)
    --help                               Display this message
    --version                            Display author and version information
    --net_snmp_perl                      Use NET-SNMP Perl integration instead of
                                         NET-SNMP snmptranslate utility
    --in=filename                        Input file
    --out=filename                       Output file
    --mibdir=dir                         Directory for mib files when net_snmp_perl is enabled*
    --nodes=name or file                 If specified, will insert a NODES line after FORMAT or EXEC. 
                                         The host name(s) separated by spaces, or the name of the
					 nodes file.  Use quotes for multiple host names.
					    
* Note:  If net_snmp_perl is enabled, then the directory path for the MIB file directory is 
         required.  Not specifying a --mibdir will use the default of \/usr\/share\/snmp\/mibs\/.

/;
		
	&showversion;
	print $USAGE;

	exit(0);
}

if ($debug == 1)
{
	$DEBUGGING = 1;	
}
if ($debug == 2)
{
	$DEBUGGING = 2;	
}

$input = $in;
$output = $out;

print "nodes: $nodes\n";

if (($input eq "") || ($output eq ""))
{
	print "Missing arguments!\n\n";
	print "Syntax is: snmpttconvertmib --in=inputmibfile --out=outputfile\n\n";
	die;
}

if ($net_snmp_perl == 1)
{
	require SNMP;
	$SNMP::save_descriptions = 0;	# Don't need them - process by hand
					# to be able to pull out the SUMMARY lines
	&SNMP::addMibDirs($mibdir);
	&SNMP::setMib($input);

	print "\n\n*****  Using UCD-SNMP / NET-SNMP Perl module *****\n\n";
}
else
{
	print "\n\n*****  Processing MIB file WITHOUT using UCD-SNMP / NET-SNMP Perl module *****\n\n";
	check_snmptranslate_version();
}


print "\nFile to load is:	$input\n";
print "File to APPEND TO:	$output\n";

if ($net_snmp_perl == 1)
{
	print "MIB directory:    	$mibdir\n";
}

if ($DEBUGGING >= 1)
{
	print "\nLoading$input\n";
}

unless (open INPUTFILE, "<$input")
{
	die "Cannot open input file: $!";
}

while (<INPUTFILE>)
{
	chomp;				#remove <cr> at end of line	
	push(@mibfile, $_);		#add to each line to @trapconf array
}

if ($DEBUGGING >= 1)
{
	print "Finished loading $input\n\n";
}

$currentline=0;

unless (open OUTPUTFILE, ">>$output")
{
	die "Cannot open output file: $!";
}

print OUTPUTFILE "#\n#\n#\n#\n";
print OUTPUTFILE "MIB: $input converted on " . scalar(localtime) . " using snmpttconvertmib $snmpttconvertmib_version\n";

if ($net_snmp_perl == 0)
{
	# Process the trap files by hand

while ($currentline <= $#mibfile)
{
	$line = $mibfile[$currentline];
	
	# TRAP-TYPE (V1) / NOTIFICATION-TYPE (V2)
	# 
	# eg: 'mngmtAgentTrap-23003 TRAP-TYPE';
	# eg: 'ciscoSystemClockChanged NOTIFICATION-TYPE';
	if ( $line =~ /(.*)\s+TRAP-TYPE.*/ || $line =~ /(.*)\s+NOTIFICATION-TYPE.*/ )
	{	
		if ( $line =~ /(.*)\s+TRAP-TYPE.*/ )
		{
			$trapversion = 'TRAP';
		}
		else
		{
			$trapversion = 'NOTIFICATION';
		}
		
		$enterprisefound =0;
		
		# If the TRAP-TYPE / NOTIFICATION-TYPE line starts with white space, it's probably a import line, so ignore
		if ( $line =~ /^\s+TRAP-TYPE.*/ || $line =~ /^\s+NOTIFICATION-TYPE.*/  || 
				$line =~ /^.*,.*NOTIFICATION-TYPE.*/ )
		{
			print "skipping a TRAP-TYPE / NOTIFICATION-TYPE line - probably an import line.\n";
			$currentline++; # Increment to the next line
			$line = $mibfile[$currentline]; # Get next line
			next;
		}
		
		$trapname = $1;

		# Remove beginning and trailing white space
		$trapname =~ /\s*([A-Za-z0-9_-]+)\s*/;
		$trapname = $1;

		
		print "#\n";
		print "Line: $currentline\n";
		if ($trapversion eq 'TRAP')
		{
			print "TRAP-TYPE: $1\n";		# If trapsummary blank, use trapsummary line for FORMAT and EXEC
		}
		else
		{
			print "NOTIFICATION-TYPE: $1\n";	# If trapsummary blank, use trapsummary line for FORMAT and EXEC
		}
		
		$currentline++; # Increment to the next line
		$line3 = $mibfile[$currentline];

		$end_of_definition = 0;
		
		while ( ($currentline <= $#mibfile) && !($line3 =~ /(.*)\s+TRAP-TYPE.*/ ) 
			&& !($line3 =~ /(.*)\s+NOTIFICATION-TYPE.*/) && ($end_of_definition == 0) )
		{
			# Keep going through the file until the next TRAP-TYPE / NOTIFICATION-TYPE or the end of the mib file
			# is reached
				
			# Look for DESCRIPTION and anything after (including newline with /s)
			# and capture that anything in $1

			# If line starts with ENTERPRISE, pull it out
			# Only applies to SNMPv1 TRAPs
			# (SNMPv2 NOTIFICATIONS have the enterprise in the ::= line)
			if ($line3 =~ /ENTERPRISE\s+(.*)/)
			{
				print "Enterprise: $1\n";
				$enterprise = $1;
				$enterprisefound =1;
			}
			
			if ($line3 =~ /DESCRIPTION(.*)/s)
			{
				$temp1 = 0;
				$traptype = "";
				$trapsummary = "";
				@description = ();
				
				# Start of DESCRIPTION
				
				#print "SDESC\n";
				
				# If there is more text after the word DESCRIPTION, assume it's the start of 
				# the description.  If it is, pull it out and place in $descriptionline1.
				if ($1 ne "")
				{
					# Pull out text and remove beginning and trailing white space
					if ($1 =~ /\s*(.*)\s*/)
					{
						#print ("2\n");
						# Remove any quotes
						$_ = $1;
						s(\")()g;
						# "								
						$descriptionline1 = $_;
						$temp1 = 1;

						push (@description, "$_\n");
						#print "Line 1a: $_ \n";
					}
				}
				
				$currentline++; # Increment to the next line
				$line4 = $mibfile[$currentline];
	
				# Assume the rest is the description up until a ::= or end of the file
				while (! ($line4 =~ /::=/))
				{
					# If next line is a --#TYPE, pull out the information and place in $traptype
					if ($line4 =~ /--#TYPE(.*)/)
					{
							
						# Pull out text and remove beginning and trailing white space and quotes
						if ($line4 =~ /\s*--#TYPE\s*(.*)\s*/)
						{
							# Remove any quotes
							$_ = $1;
							s(\")()g;
							# "
							
							#print ("2\n");
							$traptype = $_;
							#print "Type: $traptype \n";
						}
						
						# Increment to next line and continue with the loop
						$currentline++; # Increment to the next line
						$line4 = $mibfile[$currentline];
						next;
					}
				  	
					# If next line is a --#SUMMARY, pull out the information and place in $summary
					if ($line4 =~ /--#SUMMARY(.*)/)
					{
							
						# Pull out text and remove beginning and trailing white space and quotes
						if ($line4 =~ /\s*--#SUMMARY\s*(.*)\s*/)
						{
							# Remove any quotes
							$_ = $1;
							s(\")()g;
							# "
							
							#print ("2\n");
							$trapsummary = $_;
							#print "Summary: $trapsummary \n";
						}
						
						# Increment to next line and continue with the loop
						$currentline++; # Increment to the next line
						$line4 = $mibfile[$currentline];
						next;
					}
					# If next line is a --#ARGUMENTS, pull out the information and place in $arguments
					if ($line4 =~ /--#ARGUMENTS {(.*)}/)
					{
						@arguments = split /,/, $1;
						
						for($i=0;$i <= $#arguments;$i++)
						{
							#print "argument $i: $arguments[$i]\n";
						}
											
						# Increment to next line and continue with the loop
						$currentline++; # Increment to the next line
						$line4 = $mibfile[$currentline];
						next;
					}					
					# If next line starts with a --#, ignore it and continue with the loop
					# (we already got the SUMMARY line above)
					if ($line4 =~ /--#/)
					{
						$currentline++; # Increment to the next line
						$line4 = $mibfile[$currentline];
						next;
					}
					# If we did not find text after the word DESCRIPTION, then the NEXT
					# line must be the first line of description.  Pull that out and place
					# in $descriptionline1.
					if ($temp1 == 0)
					{
						# Remove beginning and trailing white space
						$line4 =~ (/\s*(.*)\s*/);
						# Remove any quotes
						$_ = $1;
						s(\")()g;
						# "								
						$descriptionline1 = $_;
						
						push (@description, "$_\n");
						#print "Line 1b: $_ \n";
						$temp1 = 1;
					}
					else
					{
						# Remove beginning and trailing white space
						$line4 =~ (/\s*(.*)\s*/);
						if ($1 ne "")
						{
							# Remove any quotes
							$_ = $1;
							s(\")()g;
							# "
														
							push (@description, "$_\n");
							#print "c:$_\n";
						}
					}

					$currentline++; # Increment to the next line
					$line4 = $mibfile[$currentline];
				}
				#print "EDESC\n";
				
				if ($line4 =~ /::=/)
				{
					$end_of_definition = 1;		# Move on to the next one
					
					if ($enterprisefound == 0)
					{
						# $line4 should now contain ::= line
						# # Pull out enterprise from { }
						# # Would only apply to SNMPv2 NOTIFICATIONS
						# #print "Line4: $line4\n";
						$line4 =~ /{(.*)\s\d.*/;
						
						#print "\$1=$1\n";
						$enterprisefound =1;
						
						# Remove any spaces
						$_ = $1;
						s( )()g;
						$enterprise = $_;
						print "Enterprise: $enterprise\n";
					}					
				}				
			}
			$currentline++; # Increment to the next line
			$line3 = $mibfile[$currentline];
		}

		# Combine Trap type and summary together to make new summary
		if ($traptype ne "" && $prepend_type == 1)
		{
			$trapsummary = $traptype . ": " . $trapsummary;
		}
		
		if ($snmptranslate_use_On == 1)
		{
			if ($trapversion eq 'TRAP')
			{
				$trapoid = `snmptranslate -IR -Ts -On $enterprise#.$trapname`;
			}
			else
			{
				$trapoid = `snmptranslate -On -IR -Ts $enterprise.$trapname`;
			}
		}
		else
		{
			if ($trapversion eq 'TRAP')
			{
				$trapoid = `snmptranslate -IR -Ts $enterprise#.$trapname`;
			}
			else
			{
				$trapoid = `snmptranslate -IR -Ts $enterprise.$trapname`;
			}
		}
		
		chomp $trapoid;
		if ($trapoid ne "")
		{
			print OUTPUTFILE "#\n#\n#\n";
			print OUTPUTFILE "EVENT $trapname $trapoid \"Status Events\" Normal\n";
	
			# Loop through trapsummary and replace the %s and %d etc with %1 to %n
	
			$j = $#arguments; # j is last element number
			
			#print "j is $j\n";
			
			# Change the %s or %d etc into $1 etc (starts at $1)
			$_ = $trapsummary;
			for ($j=0; $j<= $#arguments; $j++)
			{
				$variable = ($arguments[$j])+1;
				s(%[a-zA-Z])(\$$variable);
			}
			
			#print "new summary: $_\n";
			
			$trapsummary = $_;
			
			# Use trapsummary line
			if ($trapsummary ne "")
			{
				print OUTPUTFILE "FORMAT $trapsummary\n";
				if ($defaultexec ne '')
				{
					print OUTPUTFILE "$defaultexec $defaultexecquote$trapsummary$defaultexecquote\n"
				}		
			}
			# If trapsummary blank, use descriptionline1 line
			elsif ($descriptionline1 ne "")
			{


				if ($descriptionline1 =~ /%[a-zA-Z]/)
				{
					# Sometimes the variables are in the first line of the description
					# Change the %s or %d etc into $1 etc (starts at $1)
					# There is no list of variables, so just put them in order starting at 1 and
					# going up to 20
					$_ = $descriptionline1;
					for ($j=1; $j<= 20; $j++)
					{
						s(%[a-zA-Z])(\$$j);
					}
					$descriptionline1 = $_;
					$descriptionlinehadvariables = 1;

					print OUTPUTFILE "FORMAT $descriptionline1\n";
					if ($defaultexec ne '')
					{
						print OUTPUTFILE "$defaultexec $defaultexecquote$descriptionline1$defaultexecquote\n"
					}
				}
				else
				{
				  if ($default_wildcard == 1)
				  {
				     print OUTPUTFILE "FORMAT $descriptionline1 \$*\n";
				     if ($defaultexec ne '')
				     {
				       print OUTPUTFILE "$defaultexec $defaultexecquote$descriptionline1 \$*$defaultexecquote\n";
				     }
				   }
				   else
				   {
				     print OUTPUTFILE "FORMAT $descriptionline1\n";
				     if ($defaultexec ne '')
				     {
				       print OUTPUTFILE "$defaultexec $defaultexecquote$descriptionline1$defaultexecquote\n";
				     }
				   }
				   
				}
			}
			# If descriptionline1 is also blank, just use $*
			else
			{
				print OUTPUTFILE "FORMAT \$*\n";
				if ($defaultexec ne '')
				{
					print OUTPUTFILE "$defaultexec $defaultexecquote\$*$defaultexecquote\n"
				}
				#print OUTPUTFILE "EXEC \$*\n";
			}
	
			if ($nodes ne '')
			{
				print OUTPUTFILE "NODES $nodes\n";
			}	
			
			print OUTPUTFILE "SDESC\n";
			#print OUTPUTFILE "$descriptionline1\n";
			for ($i=0; $i <= $#description; $i++)
			{
				print OUTPUTFILE "$description[$i]";
			}
			print OUTPUTFILE "EDESC\n";
	
			$currentline--;
		}
		
		print "OID: $trapoid\n";
		#print "\@description is ", $#description,"\n";
		#print "going to next trap / notification\n\n";
	}
	
	$currentline++; # Increment to the next line
}	


sub check_snmptranslate_version
{
  $snmptranslate_use_On = 1;
  
  if (open SNMPTRANSLATE, "snmptranslate -V 2>&1|") 
  {
    $snmptranslatever = <SNMPTRANSLATE>;
    close SNMPTRANSLATE;
    
    chomp ($snmptranslatever);
    
    print "snmptranslate version: " . $snmptranslatever. "\n";
      
    if ($snmptranslatever =~ /UCD/i || $snmptranslatever =~ /NET-SNMP version: 5.0.1/i)
    {
      $snmptranslate_use_On = 0;
      if ($DEBUGGING >= 1)
      {
	print "snmptranslate is either UCD-SNMP, or NET-SNMP v5.0.1, so do not use the -On switch.  Version found: $snmptranslatever\n";
      }
    }
  }
}

# End of process the trap files by hand
}
else
{
	#Process the trap files using NET-SNMP Perl

foreach $key (sort keys %SNMP::MIB)
{
  if ($SNMP::MIB{$key}{type} eq 'TRAP' || $SNMP::MIB{$key}{type} eq 'NOTIF')
  {
    print "#\n#\n#\n";
    print "EVENT $SNMP::MIB{$key}{label} $key \"Status Events\" Normal\n";

    # Determine FORMAT line

    $currentline=0;
    while ($currentline <= $#mibfile)
    {
      $line = $mibfile[$currentline];
      if ( $line =~ /$SNMP::MIB{$key}{label}\s+TRAP-TYPE.*/  || $line =~ /$SNMP::MIB{$key}{label}\s+NOTIFICATION-TYPE.*/)
      {
	$currentline++; # Increment to the next line
	$line3 = $mibfile[$currentline];

	$end_of_definition = 0;
		
	while ( ($currentline <= $#mibfile) && !($line3 =~ /(.*)\s+TRAP-TYPE.*/ ) 
			&& !($line3 =~ /(.*)\s+NOTIFICATION-TYPE.*/) && ($end_of_definition == 0) )
	{
			# Keep going through the file until the next TRAP-TYPE or the end of the mib file
			# is reached
				
			# Look for DESCRIPTION and anything after (including newline with /s)
			# and capture that anything in $1
		
			if ($line3 =~ /DESCRIPTION(.*)/s)
			{
				$temp1 = 0;
				$traptype = "";
				$trapsummary = "";
				@description = ();
				
				# Start of DESCRIPTION
				
				#print "SDESC\n";
				
				# If there is more text after the word DESCRIPTION, assume it's the start of 
				# the description.  If it is, pull it out and place in $descriptionline1.
				if ($1 ne "")
				{
					# Pull out text and remove beginning and trailing white space
					if ($1 =~ /\s*(.*)\s*/)
					{
						#print ("2\n");
						# Remove any quotes
						$_ = $1;
						s(\")()g;
						# "								
						$descriptionline1 = $_;
						$temp1 = 1;

						push (@description, "$_\n");
						#print "Line 1a: $_ \n";
					}
				}
				
				$currentline++; # Increment to the next line
				$line4 = $mibfile[$currentline];
	
				# Assume the rest is the description up until a ::= or end of the file
				while (! ($line4 =~ /::=/))
				{
					# If next line is a --#TYPE, pull out the information and place in $traptype
					if ($line4 =~ /--#TYPE(.*)/)
					{
							
						# Pull out text and remove beginning and trailing white space and quotes
						if ($line4 =~ /\s*--#TYPE\s*(.*)\s*/)
						{
							# Remove any quotes
							$_ = $1;
							s(\")()g;
							# "
							
							#print ("2\n");
							$traptype = $_;
							#print "Type: $traptype \n";
						}
						
						# Increment to next line and continue with the loop
						$currentline++; # Increment to the next line
						$line4 = $mibfile[$currentline];
						next;
					}
				  	
					# If next line is a --#SUMMARY, pull out the information and place in $summary
					if ($line4 =~ /--#SUMMARY(.*)/)
					{
							
						# Pull out text and remove beginning and trailing white space and quotes
						if ($line4 =~ /\s*--#SUMMARY\s*(.*)\s*/)
						{
							# Remove any quotes
							$_ = $1;
							s(\")()g;
							# "
							
							#print ("2\n");
							$trapsummary = $_;
							#print "Summary: $trapsummary \n";
						}
						
						# Increment to next line and continue with the loop
						$currentline++; # Increment to the next line
						$line4 = $mibfile[$currentline];
						next;
					}
					# If next line is a --#ARGUMENTS, pull out the information and place in $arguments
					if ($line4 =~ /--#ARGUMENTS {(.*)}/)
					{
						@arguments = split /,/, $1;
						
						for($i=0;$i <= $#arguments;$i++)
						{
							#print "argument $i: $arguments[$i]\n";
						}
											
						# Increment to next line and continue with the loop
						$currentline++; # Increment to the next line
						$line4 = $mibfile[$currentline];
						next;
					}					
					# If next line starts with a --#, ignore it and continue with the loop
					# (we already got the SUMMARY line above)
					if ($line4 =~ /--#/)
					{
						$currentline++; # Increment to the next line
						$line4 = $mibfile[$currentline];
						next;
					}
					# If we did not find text after the word DESCRIPTION, then the NEXT
					# line must be the first line of description.  Pull that out and place
					# in $descriptionline1.
					if ($temp1 == 0)
					{
						# Remove beginning and trailing white space
						$line4 =~ (/\s*(.*)\s*/);
						# Remove any quotes
						$_ = $1;
						s(\")()g;
						# "								
						$descriptionline1 = $_;
						
						push (@description, "$_\n");
						#print "Line 1b: $_ \n";
						$temp1 = 1;
					}
					else
					{
						# Remove beginning and trailing white space
						$line4 =~ (/\s*(.*)\s*/);
						if ($1 ne "")
						{
							# Remove any quotes
							$_ = $1;
							s(\")()g;
							# "
														
							push (@description, "$_\n");
							#print "c:$_\n";
						}
					}

					$currentline++; # Increment to the next line
					$line4 = $mibfile[$currentline];
				}
				#print "EDESC\n";

				if ($line4 =~ /::=/)
				{
					$end_of_definition = 1;		# Move on to the next one
				}
			}
			$currentline++; # Increment to the next line
			$line3 = $mibfile[$currentline];
		}
		
		# Combine Trap type and summary together to make new summary
		if ($traptype ne "" && $prepend_type == 1)
		{
			$trapsummary = $traptype . ": " . $trapsummary;
		}
		
		$trapoid = $key;
		$trapname = $SNMP::MIB{$key}{label};	 
		chomp $trapoid;
		if ($trapoid ne "")
		{
			print OUTPUTFILE "#\n#\n#\n";
			print OUTPUTFILE "EVENT $trapname $trapoid \"Status Events\" Normal\n";
	
			# Loop through trapsummary and replace the %s and %d etc with %1 to %n
	
			$j = $#arguments; # j is last element number
			
			#print "j is $j\n";
			
			# Change the %s or %d etc into $1 etc (starts at $1)
			$_ = $trapsummary;
			for ($j=0; $j<= $#arguments; $j++)
			{
				$variable = ($arguments[$j])+1;
				s(%[a-zA-Z])(\$$variable);
			}
			
			#print "new summary: $_\n";
			
			$trapsummary = $_;
			
			# Use trapsummary line
			if ($trapsummary ne "")
			{
				print OUTPUTFILE "FORMAT $trapsummary\n";
				if ($defaultexec ne '')
				{
					print OUTPUTFILE "$defaultexec $defaultexecquote$trapsummary$defaultexecquote\n"
				}		
			}
			# If trapsummary blank, use descriptionline1 line
			elsif ($descriptionline1 ne "")
			{


				if ($descriptionline1 =~ /%[a-zA-Z]/)
				{
					# Sometimes the variables are in the first line of the description
					# Change the %s or %d etc into $1 etc (starts at $1)
					# There is no list of variables, so just put them in order starting at 1 and
					# going up to 20
					$_ = $descriptionline1;
					for ($j=1; $j<= 20; $j++)
					{
						s(%[a-zA-Z])(\$$j);
					}
					$descriptionline1 = $_;
					$descriptionlinehadvariables = 1;

					print OUTPUTFILE "FORMAT $descriptionline1\n";
					if ($defaultexec ne '')
					{
						print OUTPUTFILE "$defaultexec $defaultexecquote$descriptionline1$defaultexecquote\n"
					}
				}
				else
				{
				  if ($default_wildcard == 1)
				  {
				    print OUTPUTFILE "FORMAT $descriptionline1 \$*\n";
				    if ($defaultexec ne '')
				    {
				      print OUTPUTFILE "$defaultexec $defaultexecquote$descriptionline1 \$*$defaultexecquote\n";
				    }
				  }
				  else
				  {
				    print OUTPUTFILE "FORMAT $descriptionline1\n";
				    if ($defaultexec ne '')
				    {
				      print OUTPUTFILE "$defaultexec $defaultexecquote$descriptionline1$defaultexecquote\n";
				    }
				  }
				}
			}
			# If descriptionline1 is also blank, just use $*
			else
			{
				print OUTPUTFILE "FORMAT \$*\n";
				if ($defaultexec ne '')
				{
					print OUTPUTFILE "$defaultexec $defaultexecquote\$*$defaultexecquote\n"
				}
				#print OUTPUTFILE "EXEC \$*\n";
			}
	
			if ($nodes ne '')
			{
				print OUTPUTFILE "NODES $nodes\n";
			}
						
			print OUTPUTFILE "SDESC\n";
			#print OUTPUTFILE "$descriptionline1\n";
			for ($i=0; $i <= $#description; $i++)
			{
				print OUTPUTFILE "$description[$i]";
			}
			print OUTPUTFILE "EDESC\n";
	
			$currentline--;
		}
		
		print "OID: $trapoid\n";
		#print "\@description is ", $#description,"\n";
		#print "going to next trap\n\n";
	}

		

      
      $currentline++;
    } #end of while
   
  }
}



	#End of process the trap files using NET-SNMP Perl
}


	
